.586														; система команд (процессор Pentium)
.model flat, stdcall										; модель памяти, соглашение о вызовах
includelib kernel32.lib										; компановщику: компоновать с kernel32

.code

getmin PROC start : sdword, amount : dword					;
	mov esi, start											; адрес начала массива
	mov ecx, amount											; количество элементов
	mov ebx, [esi]											; минимальное значение в конце выполнения будет в ebx, изначально первый элемент
Next:														; 
	lodsd													; поместить 4 байт по адресу esi в eax, esi увеличится на 4
	sub ecx, 1												;
	cmp ecx, 0												; проверка, остались ли элементы в массиве
	je Exit													; завершение  перебора, если не осталось
	cmp  ebx, eax											; сравнить с предыдущим результатом
	jl Next													; если полученный байт больше перейти к повторному чтению массива(следующего байта)
	mov ebx, eax											; сохранить новое значение как меньшее
	jmp Next												; перейти к повторному чтению массива(следующего байта)
	Exit:													; 
	mov eax, ebx											; наименьшее значение в eax
	ret														; возврат результат в регистре eax
getmin ENDP													;

getmax PROC start : sdword, amount : dword					;
	mov esi, start											; адрес начала массива
	mov ecx, amount											;
	mov ebx, [esi]											; максимальное значение массива в ebx, изначально первый элемент
Next:														; метка
	lodsd													; поместить 4 байт по адресу esi в eax, esi увеличится на 4
	sub ecx, 1												;
	cmp ecx, 0												; проверка на "последний байт"
	je Exit													; если он то переход по метке
	cmp ebx, eax											; сравнить с предыдущим результатом
	jge Next												; если полученный байт меньше перейти к повторному чтению массива(следующего байта)
	mov ebx, eax											; сохранить новое значение как большее
	jmp Next												; перейти к повторному чтению массива(следующего байта)
Exit:														; метка
	mov eax, ebx											; eax в 0
	ret														; возврат результат в регистре eax
getmax ENDP			
									
end			