Microsoft (R) Macro Assembler Version 14.11.25508.2	    11/23/18 13:53:49
LP_asm01a.asm						     Page 1 - 1


				.586														; система команд (процессор Pentium)
				.model flat, stdcall										; модель памяти, соглашение о вызовах
				includelib kernel32.lib										; компановщику: компоновать с kernel32

 00000000			.code

 00000000			getmin PROC start : sdword, amount : dword					;
 00000003  8B 75 08			mov esi, start											; адрес начала массива
 00000006  8B 4D 0C			mov ecx, amount											; количество элементов
 00000009  8B 1E			mov ebx, [esi]											; минимальное значение в конце выполнения будет в ebx, изначально первый элемент
 0000000B			Next:														; 
 0000000B  AD				lodsd													; поместить 4 байт по адресу esi в eax, esi увеличится на 4
 0000000C  83 E9 01			sub ecx, 1												;
 0000000F  83 F9 00			cmp ecx, 0												; проверка, остались ли элементы в массиве
 00000012  74 08			je Exit													; завершение  перебора, если не осталось
 00000014  3B D8			cmp  ebx, eax											; сравнить с предыдущим результатом
 00000016  7C F3			jl Next													; если полученный байт больше перейти к повторному чтению массива(следующего байта)
 00000018  8B D8			mov ebx, eax											; сохранить новое значение как меньшее
 0000001A  EB EF			jmp Next												; перейти к повторному чтению массива(следующего байта)
 0000001C				Exit:													; 
 0000001C  8B C3			mov eax, ebx											; наименьшее значение в eax
					ret														; возврат результат в регистре eax
 00000022			getmin ENDP													;

 00000022			getmax PROC start : sdword, amount : dword					;
 00000025  8B 75 08			mov esi, start											; адрес начала массива
 00000028  8B 4D 0C			mov ecx, amount											;
 0000002B  8B 1E			mov ebx, [esi]											; максимальное значение массива в ebx, изначально первый элемент
 0000002D			Next:														; метка
 0000002D  AD				lodsd													; поместить 4 байт по адресу esi в eax, esi увеличится на 4
 0000002E  83 E9 01			sub ecx, 1												;
 00000031  83 F9 00			cmp ecx, 0												; проверка на "последний байт"
 00000034  74 08			je Exit													; если он то переход по метке
 00000036  3B D8			cmp ebx, eax											; сравнить с предыдущим результатом
 00000038  7D F3			jge Next												; если полученный байт меньше перейти к повторному чтению массива(следующего байта)
 0000003A  8B D8			mov ebx, eax											; сохранить новое значение как большее
 0000003C  EB EF			jmp Next												; перейти к повторному чтению массива(следующего байта)
 0000003E			Exit:														; метка
 0000003E  8B C3			mov eax, ebx											; eax в 0
					ret														; возврат результат в регистре eax
 00000044			getmax ENDP			
													
				end			
Microsoft (R) Macro Assembler Version 14.11.25508.2	    11/23/18 13:53:49
LP_asm01a.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000044 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

getmax . . . . . . . . . . . . .	P Near	 00000022 _TEXT	Length= 00000022 Public STDCALL
  start  . . . . . . . . . . . .	DWord	 bp + 00000008
  amount . . . . . . . . . . . .	DWord	 bp + 0000000C
  Next . . . . . . . . . . . . .	L Near	 0000002D _TEXT	
  Exit . . . . . . . . . . . . .	L Near	 0000003E _TEXT	
getmin . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000022 Public STDCALL
  start  . . . . . . . . . . . .	DWord	 bp + 00000008
  amount . . . . . . . . . . . .	DWord	 bp + 0000000C
  Next . . . . . . . . . . . . .	L Near	 0000000B _TEXT	
  Exit . . . . . . . . . . . . .	L Near	 0000001C _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
